/*
class Node {
  public:
    int data;
    Node *next;
    Node *prev;
    Node(int val) {
        data = val;
        next = NULL;
        prev = NULL;
    }
};

*/
class Solution {
public:
  Node* reverse(Node* head) {
        if (!head) return nullptr;

        Node* curr = head;
        Node* temp = nullptr;

        while (curr) {
            // Swap next and prev
            temp = curr->prev;
            curr->prev = curr->next;
            curr->next = temp;
            // Move to the "next" node, which is prev after swap
            curr = curr->prev;
        }

        // After the loop, temp points to the old prev of null,
        // i.e. the new head is temp->prev
        if (temp) {
            head = temp->prev;
        }

        return head;
    }
};
