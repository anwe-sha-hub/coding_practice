/*
class Node {
    int data;
    Node *next;

    Node(int x) {
        data = x;
        next = NULL;
    }
};
*/
class Solution {
  public:
    Node* deleteNode(Node* head, int key) {
        // if list is empty
        if (!head) return NULL;

        Node* curr = head;
        Node* prev = NULL;

        // if head itself holds the key
        if (head->data == key) {
            // only one node
            if (head->next == head) {
                delete head;
                return NULL;
            }

            // find the last node
            Node* last = head;
            while (last->next != head)
                last = last->next;

            // update links
            last->next = head->next;
            Node* newHead = head->next;
            delete head;
            return newHead;
        }

        // otherwise, search for the key
        do {
            prev = curr;
            curr = curr->next;

            if (curr->data == key) {
                prev->next = curr->next;
                delete curr;
                break;
            }
        } while (curr != head);

        // if key not found, head remains same
        return head;
    }
};